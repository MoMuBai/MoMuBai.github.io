<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-31T09:47:04.284Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/03/31/hello-world/"/>
    <id>http://yoursite.com/2019/03/31/hello-world/</id>
    <published>2019-03-31T09:47:04.284Z</published>
    <updated>2019-03-31T09:47:04.284Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/03/29/2019-3-31-5.1%E6%97%85%E6%B8%B8%E6%94%BB%E7%95%A5/"/>
    <id>http://yoursite.com/2019/03/29/2019-3-31-5.1旅游攻略/</id>
    <published>2019-03-29T07:36:14.491Z</published>
    <updated>2019-03-31T09:11:15.140Z</updated>
    
    <content type="html"><![CDATA[<h3 id="5-1节日旅游攻略"><a href="#5-1节日旅游攻略" class="headerlink" title="5.1节日旅游攻略"></a>5.1节日旅游攻略</h3><hr><p>layout: post<br>title: 5.1节日旅游攻略</p><h2 id="permalink-5-1节日旅游攻略"><a href="#permalink-5-1节日旅游攻略" class="headerlink" title="permalink: /5.1节日旅游攻略/"></a>permalink: /5.1节日旅游攻略/</h2><hr><p><strong>未完待续</strong></p><hr><h4 id="第一站：乌镇"><a href="#第一站：乌镇" class="headerlink" title="第一站：乌镇"></a>第一站：乌镇</h4><pre><code>出发站：杭州出发时间：5.1 动车：        G7572：9:57    ￥21.5*2    G7316：10:12  ￥21.5*2时间：5.1-5.2酒店：乌镇小宿 ￥468门票：西栅+东栅联票 ￥190*2景点：列举了主要景点    1、西栅：最适合夜游及住宿的区域，夜晚的水上莲花可以look look        1.1、中国邮政：光绪年间的邮局        1.2、草木本色染坊：拍照        1.3、白莲塔：乌镇最高建筑        1.4、三寸金莲馆：中国女性裹足史        1.5、月老庙：许愿        1.6、邵明书院：邵明太子读书处        1.7、囍庆堂：江南婚礼        1.8、西市河：最美夜景地        1.9、天下第一锅：申请吉尼斯纪录        1.10、乌镇大剧院/大戏院：感受当地人文生活        1.11、茅盾纪念堂：纪念馆    2、东栅        2.1、茅盾故居：文学大师茅盾故居        2.2、宏源泰染坊：拍照        2.3、三白酒坊：酿酒过程        2.4、江南百床馆：中国第一家收藏、展出江南古床的博物馆        2.5、逢源双桥：按男左女右走一遍可以左右逢源        2.6、江南民俗馆：江南民俗文化展示        2.7、江南木雕陈列馆：古代木雕展览        2.8、财神湾：发财啊，去去去。        2.9、立志书院：茅盾的手稿、作品、提字        2.10、修真观广场        2.11、余榴梁钱币馆：各个国家的钱币展示    3、南栅和北栅都属于未开发的地段，原生态美食：找找看</code></pre><h4 id="第二站：苏州"><a href="#第二站：苏州" class="headerlink" title="第二站：苏州"></a>第二站：苏州</h4><pre><code>出发站：乌镇出发时间：5.2动车：        G7586：10：04    ￥85.5*2    G7572：10:126 ￥90.5*2时间：5.2-5.4酒店：苏州小院  ￥530*2景点：苏州景点太多    1、观前街        1.1、拙政园：天下园林之母，门票：70*2        1.2、苏州博物馆：苏州园林风格        1.3、平江路：苏州保存最好的古街        1.4、狮子林：叠石最有名，四大名园之一        1.5、苏州古典园林：世界文化遗产        1.6、太平天国忠王符：苏式彩绘    2、十全街        2.1、网师园：苏州四大名园之一        2.2、沧浪亭：苏州最古老园林        2.3、苏州大学：中国十大最美校园之一        2.4、苏州云岩寺塔：中国第一斜塔    3、石路商圈        3.1、虎丘：吴中第一名胜        3.2、七里山塘：姑苏第一名街        3.3、留园：小家碧玉式，四大名园之一        3.4、剑池：虎丘最神秘的名胜        3.5、万景山庄：苏派盆景精品园        3.6、山塘书院：听苏州评弹        3.7、拥翠山庄：苏州唯一无水园林    4、金鸡湖：        4.1、金鸡湖：骑行、夜景        4.2、月光码头：苏州十大最美夜景之首    5、周庄        5.1、周庄古镇：中国第一水乡        5.2、双桥：故乡的回忆蓝本        5.3、沈万三故居：沈万三        5.4、沈厅：沈万三后人的宅子        5.5、南湖秋月园：水中佛国        5.6、周庄博物馆：了解周庄历史        5.7、富安桥：周庄最古老的桥    6、同里        6.1、同里古镇：江南六大古镇之一        6.2、退思园：世界文化遗产        6.3、珍珠塔：同里最大园林        6.4、耕乐堂：同里八景之一    7、阳澄湖        7.1阳澄湖半岛旅游度假区：阳澄湖大闸蟹    8、太湖        8.1、苏州东山景区：太湖山水第一镇        8.2、苏州西山景区：太湖第一大岛美食：找找</code></pre><h4 id="终点站：杭州"><a href="#终点站：杭州" class="headerlink" title="终点站：杭州"></a>终点站：杭州</h4><pre><code>时间：5.4</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;5-1节日旅游攻略&quot;&gt;&lt;a href=&quot;#5-1节日旅游攻略&quot; class=&quot;headerlink&quot; title=&quot;5.1节日旅游攻略&quot;&gt;&lt;/a&gt;5.1节日旅游攻略&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;layout: post&lt;br&gt;title: 5.1节日旅游攻略&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>各大商店应用图标、截图尺寸</title>
    <link href="http://yoursite.com/2018/03/07//%E5%90%84%E5%A4%A7%E5%95%86%E5%BA%97%E5%BA%94%E7%94%A8%E5%9B%BE%E6%A0%87%E3%80%81%E6%88%AA%E5%9B%BE%E5%B0%BA%E5%AF%B8//"/>
    <id>http://yoursite.com/2018/03/07//各大商店应用图标、截图尺寸//</id>
    <published>2018-03-07T12:50:02.598Z</published>
    <updated>2018-03-07T12:50:02.598Z</updated>
    
    <content type="html"><![CDATA[<h3 id="360"><a href="#360" class="headerlink" title="360"></a>360</h3><ul><li>应用图标：512 * 512png</li><li>应用截图：480 * 800 5张 png</li></ul><h3 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h3><ul><li>应用图标：512*512 png</li><li>应用截图：480 * 800 5张 </li></ul><h3 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h3><ul><li>应用图标：16 <em> 16一张，512 </em> 512一张 png</li><li>应用截图：480 * 800 5张 png</li></ul><h3 id="华为"><a href="#华为" class="headerlink" title="华为"></a>华为</h3><ul><li>应用图标：16 <em> 16一张，512 </em> 512一张 png</li><li>应用截图：480 * 800 5张 png</li></ul><h3 id="魅族"><a href="#魅族" class="headerlink" title="魅族"></a>魅族</h3><ul><li>应用图标：16 <em> 16一张，512 </em> 512一张 png</li><li>应用截图：480 * 800 5张 png</li></ul><h3 id="Oppo"><a href="#Oppo" class="headerlink" title="Oppo"></a>Oppo</h3><ul><li>应用图标：16 <em> 16一张，512 </em> 512一张 png</li><li>应用截图：480 * 800 5张 png</li></ul><h3 id="Vivo"><a href="#Vivo" class="headerlink" title="Vivo"></a>Vivo</h3><ul><li>应用图标：16 <em> 16一张，512 </em> 512一张 png</li><li>应用截图：480 * 800 5张 png</li></ul><h3 id="锤子"><a href="#锤子" class="headerlink" title="锤子"></a>锤子</h3><ul><li>应用图标：16 <em> 16一张，512 </em> 512一张 png</li><li>应用截图：480 * 800 5张 png</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;360&quot;&gt;&lt;a href=&quot;#360&quot; class=&quot;headerlink&quot; title=&quot;360&quot;&gt;&lt;/a&gt;360&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;应用图标：512 * 512png&lt;/li&gt;
&lt;li&gt;应用截图：480 * 800 5张 png&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android9.0曝光新特性</title>
    <link href="http://yoursite.com/2018/03/07//Android9.0%E6%9B%9D%E5%85%89%E6%96%B0%E7%89%B9%E6%80%A7//"/>
    <id>http://yoursite.com/2018/03/07//Android9.0曝光新特性//</id>
    <published>2018-03-07T12:50:02.597Z</published>
    <updated>2018-03-07T12:50:02.598Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>安卓9.0将加入电话录音功能：提高通话安全性</p><p>通话录音是目前许多手机都有的功能，但安卓原生系统并没有自带这项功能。</p></blockquote><p>据外媒<strong>Android Headlines</strong>消息称，发现Google在下个安卓开放源代码（AOSP）中发现新的代码，(此代码可能指向记录录音功能)说明下个安卓版本将会具有记录录音功能。</p><p>据悉，原声<strong>Android9.0</strong>的版本可以提供通话录音，而且通过提示用户进行操作，并且双方在通话的过程中，手机系统每15秒钟会发出一次蜂鸣声(手机将会把频率为1400Hz、每15秒钟重复一次的提示音添加到通话中，该声音将会被通话双方都听到，让对方确认你正在录音)，这种声音是提示呼叫者他们的对话正在被录音。</p><p>为了保证安全性，这段录音文件极有可能会存在Google云服务器中(话说国内如何访问呢…)</p><p>另外，据说<strong>Android9.0</strong>会提高系统的封闭性，让一些高度自由化的操作断绝掉(比如高权限插件、自动签到、个性化UI定制等)，整体的系统机制向iOS靠拢，对于用户来说只能说是喜忧参半，采用封闭机制，APP自启动、高敏感权限申请，等不再会出现，安全性、流畅度、稳定性都将大幅提升，但是却要牺牲原本的可玩性，只能说鱼与熊掌不能兼得吧！</p><p>当然对于开发者来说，提高系统的封闭性后，缺点在于我们对于一些需要的权限、操作需要更多的实现代码，同时原本的一些功能需要通过不同的方式方法实现，好处在于我们可以开发出安全性、稳定性更高的App！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;安卓9.0将加入电话录音功能：提高通话安全性&lt;/p&gt;
&lt;p&gt;通话录音是目前许多手机都有的功能，但安卓原生系统并没有自带这项功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;据外媒&lt;strong&gt;Android Headlines&lt;/strong&gt;消
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TensorFlow入门</title>
    <link href="http://yoursite.com/2018/03/07//TensorFlow%E5%85%A5%E9%97%A8//"/>
    <id>http://yoursite.com/2018/03/07//TensorFlow入门//</id>
    <published>2018-03-07T12:50:02.596Z</published>
    <updated>2018-03-07T12:50:02.597Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MNIST机器学习入门"><a href="#MNIST机器学习入门" class="headerlink" title="MNIST机器学习入门"></a><a href="http://wiki.jikexueyuan.com/project/tensorflow-zh/tutorials/mnist_beginners.html" target="_blank" rel="noopener">MNIST机器学习入门</a></h4><p>MNIST:机器学习的入门，是一个入门级的计算机视觉数据集，包含了2部分：</p><ul><li>手写的数字图片</li><li>数字图片对应的标签</li></ul><p>MNIST数据集：官网地址是<a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">Yann LeCun’s website</a><br>下载下来的数据集被分成了2部分：60000行的训练数据集(mnist.train)和10000行的测试数据集(mnist.test)</p><blockquote><p>这么切分的好处在于：在机器学习模式设计时必须有一个单独的测试数据集不用与训练而是用来评估这个模型的性能，从而更加容易把设计的模型推广到其他数据集上(泛化)</p></blockquote><hr><p>参考链接</p><p><a href="http://tensorflow.org/" target="_blank" rel="noopener">英文官方网站</a></p><p><a href="http://wiki.jikexueyuan.com/project/tensorflow-zh/" target="_blank" rel="noopener">TensorFlow 官方文档中文版</a></p><p><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="noopener">英文版GithHub仓库</a></p><p><a href="https://github.com/jikexueyuanwiki/tensorflow-zh" target="_blank" rel="noopener">中文版GithHub仓库</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;MNIST机器学习入门&quot;&gt;&lt;a href=&quot;#MNIST机器学习入门&quot; class=&quot;headerlink&quot; title=&quot;MNIST机器学习入门&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/project/tensorfl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android仓库托管平台</title>
    <link href="http://yoursite.com/2018/03/07//Android%E4%BB%93%E5%BA%93%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0//"/>
    <id>http://yoursite.com/2018/03/07//Android仓库托管平台//</id>
    <published>2018-03-07T12:50:02.595Z</published>
    <updated>2018-03-07T12:50:02.596Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Android-Library的托管平台介绍"><a href="#Android-Library的托管平台介绍" class="headerlink" title="Android Library的托管平台介绍"></a>Android Library的托管平台介绍</h4><blockquote><p>Android Studio是从build.gradle里面定义的Maven仓库服务器上下载library</p></blockquote><p>在build.gradle中会看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()//使用Jcenter作为Maven</span><br><span class="line">        mavenCentral()//使用mavenCentral作为Maven</span><br><span class="line">        maven &#123;//自定义maven</span><br><span class="line">            url &apos;https://maven.google.com/&apos;</span><br><span class="line">            name &apos;Google&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过</p><ul><li><p>Jcenter</p><blockquote><p>Jcenter是一个由bintray.com维护的Maven仓库</p></blockquote></li><li><p>mavenCentral</p><blockquote><p>MavenCentral是由sonatype.org维护的Maven仓库</p></blockquote></li><li><p>maven { url ‘自己的仓库服务器地址’ }</p><blockquote><p>有时候会将library放在自己的服务器上，这时候就需要我们添加maven地址</p></blockquote></li></ul><p>但是一般来说我们只会使用<strong>Jcenter</strong>和<strong>mavenCentral</strong>，毕竟自己维护一个服务器地址成本较高，而且对于使用者来说他们只需要添加代码的依赖地址</p><blockquote><p>实际上除了Maven仓库外还有另外一种仓库：<a href="http://ant.apache.org/ivy/" target="_blank" rel="noopener">Ivy仓库</a></p></blockquote><h4 id="Jcenter和mavenCentral比较"><a href="#Jcenter和mavenCentral比较" class="headerlink" title="Jcenter和mavenCentral比较"></a>Jcenter和mavenCentral比较</h4><p>两个仓库都具有相同的使命：提供Java或者Android的Library服务</p><p>最开始的时候，AndroidStudio选择<strong>MavenCentral</strong>作为默认仓库，后来由于<strong>MavenCentral</strong>的不友好，对于开发者上传Library很难，同时由于其他的种种原因，AndroidStudio决定把<strong>MavenCentral</strong>换成<strong>Jcenter</strong></p><pre><code>* jcenter通过CDN发送library，开发者可以享受到更快的下载体验。* jcenter是全世界最大的Java仓库，因此在Maven Central 上有的 在jcenter上也极有可能有。换句话说jcenter是Maven Central的超集。* 上传library到仓库很简单，不需要像在 Maven Central上做很多复杂的事情* 友好的用户界面</code></pre><hr><blockquote><p>其他相关问题</p></blockquote><ul><li>如果要了解如何发布自己的library到Jcenter，可以查看<a href="http://mubai.site/%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83%E5%88%B0%E5%85%AC%E5%85%B1%E7%9A%84jcenter%E4%BB%93%E5%BA%93/" target="_blank" rel="noopener">发布Library到Jcenter</a></li><li>有时候我们通过Jcenter依赖Library的时候加载很慢，可以查看<a href="http://blog.csdn.net/xiongbatianxia30146/article/details/63686359" target="_blank" rel="noopener">解决JCenter下载太慢的问题</a>来解决</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Android-Library的托管平台介绍&quot;&gt;&lt;a href=&quot;#Android-Library的托管平台介绍&quot; class=&quot;headerlink&quot; title=&quot;Android Library的托管平台介绍&quot;&gt;&lt;/a&gt;Android Library的托管平台
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>谈谈Android中的JNI和NDK</title>
    <link href="http://yoursite.com/2018/03/07//Android%E4%B8%AD%E7%9A%84JNI%E5%92%8CNDK//"/>
    <id>http://yoursite.com/2018/03/07//Android中的JNI和NDK//</id>
    <published>2018-03-07T12:50:02.594Z</published>
    <updated>2018-03-07T12:50:02.595Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近发现光看源码的过程是在太枯燥了，准备开始以博客的形式来解读源码，一方面是为了能让自己更好的巩固知识点，一方面是为了能展(zhuang)现(bi)下自己</p></blockquote><p>今天要来说说<strong>JNI</strong>和<strong>NDK</strong>，最近发现使用<strong>NDK</strong>开发的需求正在不断增加啊，不管是为了能<strong>与本地的代码交互</strong>或者是为了<strong>更好的体验(使用C、C++的so)</strong>都在不断的促使我们使用<strong>NDK</strong>。</p><h4 id="什么是JNI"><a href="#什么是JNI" class="headerlink" title="什么是JNI"></a>什么是JNI</h4><ul><li>定义：<strong>JNI(Java Native Interface)</strong> Java本地接口</li><li>作用：我们可以通过<strong>JNI</strong>来使<strong>Java</strong>能与<strong>本地的其他语言(C、C++)</strong>进行<strong>交互</strong></li><li>优势：实际开发中，有时候会遇到一些性能要求的功能，而<strong>Java</strong>代码在处理性能方面远远不如<strong>C、C++</strong>，所以我们可以通过<strong>C、C++</strong>开发功能，然后通过<strong>JNI</strong>来使得<strong>Java</strong>代码与<strong>C、C++代码</strong>的交互(很多人都会举例一大堆JNI的应用场景，实际上不管是什么使用场景都是基于<strong>Java</strong>代码和<strong>其他语言</strong>的交互)，所以说JNI可以扩展JVM的能力，可以进行驱动开发，复用已有的一些开源库，而且一些产品的核心技术一般也是采用JNI开发，不易被破解</li><li>劣势：尽管<strong>JNI</strong>带来了很多的使用场景，提高了与本地语言交互的能力，但是它也带来了一些不足，我们都知道Java火爆的原因之一就是它的<strong>跨平台</strong>，但是现在<strong>JNI</strong>与本地的语言的交互导致我们需要为不同的系统的本地语言来实现不同的代码，削弱了Java的<strong>跨平台性</strong>，而且有一点就是通过JNI调用还是会比C、C++编写的原生应用要慢一点</li></ul><h4 id="什么是NDK"><a href="#什么是NDK" class="headerlink" title="什么是NDK"></a>什么是NDK</h4><ul><li>定义：NDK(Native Development Kit)，Google对其定义为一套允许您使用原生代码语言(例如C和C++)实现部分应用的工具集</li><li>作用：能让我们快速的开发C、C++的so动态库，并且将so和应用一起打包成APK</li></ul><h4 id="JNI和NDK的关系"><a href="#JNI和NDK的关系" class="headerlink" title="JNI和NDK的关系"></a>JNI和NDK的关系</h4><p>NDK为我们生成了C、C++的so动态库，JNI又提供了Java代码和其他语言(C、C++)交互的能力，这两者之间可以实现互补，可以说JNI是目的，而NDK是实现JNI的手段，通过NDK来实现JNI的功能，最后达到“Java+C”的开发方式</p><h4 id="NDK的使用"><a href="#NDK的使用" class="headerlink" title="NDK的使用"></a>NDK的使用</h4><blockquote><p>开发环境：Mac OS 10.13.2 + Android Studio 3.0</p></blockquote><h5 id="NDK的添加配置"><a href="#NDK的添加配置" class="headerlink" title="NDK的添加配置"></a>NDK的添加配置</h5><p>打开<strong>Preferences-&gt;Appearance&amp;Behavior-&gt;SystemSettings-&gt;AndroidSDK-&gt;SDKTools</strong>勾选<strong>NDK</strong>下载</p><p><img src="http://p0sgkjh7x.bkt.clouddn.com/58B7EDC0-46FF-493F-BE65-937F00D93CEF.png" alt="NDK配置添加"></p><p>等待安装完毕</p><p>我这边已经安装完毕可以在<strong>local.properties</strong>中看到</p><blockquote><p>这些是Android Studio自动生成的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ndk.dir=/Users/lzw/Library/Android/sdk/ndk-bundle</span><br><span class="line">sdk.dir=/Users/lzw/Library/Android/sdk</span><br></pre></td></tr></table></figure><h5 id="项目中添加JNI支持"><a href="#项目中添加JNI支持" class="headerlink" title="项目中添加JNI支持"></a>项目中添加JNI支持</h5><blockquote><p>我不添加好像也可以…</p></blockquote><p>在<strong>gradle.properties</strong>中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.useDeprecatedNdk=true</span><br></pre></td></tr></table></figure><p>然后在app的<strong>build.gradle</strong>中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;com.android.application&apos;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 23</span><br><span class="line">    buildToolsVersion &quot;26.0.2&quot;</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion 15</span><br><span class="line">        targetSdkVersion 23</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line"></span><br><span class="line">        ndk &#123;</span><br><span class="line">        //要支持的CPU都有哪些，可以自己选择添加</span><br><span class="line">            abiFilters &quot;armeabi-v7a&quot;,&quot;armeabi&quot;,&quot;arm64-v8a&quot;,&quot;mips&quot;,&quot;mips64&quot;</span><br><span class="line">            //生成的so名称</span><br><span class="line">            moduleName &quot;MuBaiYs7&quot;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])</span><br><span class="line">    compile &apos;com.android.support:appcompat-v7:23.1.0&apos;</span><br><span class="line">    testCompile &apos;junit:junit:4.12&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点在于添加了注释的那2句话：</p><h5 id="项目中添加Java访问C的接口类"><a href="#项目中添加Java访问C的接口类" class="headerlink" title="项目中添加Java访问C的接口类"></a>项目中添加Java访问C的接口类</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class AndroidJni &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 要与C层交互的方法</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static native String getString();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 加载so，要跟build.gradle中自己定义so名称保持一致</span><br><span class="line">     */</span><br><span class="line">    static &#123;</span><br><span class="line">        System.loadLibrary(&quot;MuBaiYs7&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们会根据方法<figure class="highlight plain"><figcaption><span>function Java_com_lzw_ys7_jni_AndroidJni_getString```创建方法，然后Studio会为我们在根目录中生成一个cpp的文件夹，里面有一个.c文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">![C层中的方法](http://p0sgkjh7x.bkt.clouddn.com/D618011D-DB8B-4A1A-92F5-2702CEC7FB76.png)</span><br><span class="line"></span><br><span class="line">这个文件的名称是可以自己修改的，我们查看这个文件可以发现，它就提供了一个方法，返回一个字符串，这边我们让它返回&quot;MuBaiYs7Jni&quot;</span><br></pre></td></tr></table></figure></p><p>#include &lt;jni.h&gt;</p><p>JNIEXPORT jstring JNICALL<br>Java_com_lzw_ys7_jni_AndroidJni_getString(JNIEnv *env, jobject instance) {</p><pre><code>return (*env)-&gt;NewStringUTF(env, &quot;MuBaiYs7Jni&quot;);</code></pre><p>}</p><p><code>`</code></p><h5 id="调用Java代码"><a href="#调用Java代码" class="headerlink" title="调用Java代码"></a>调用Java代码</h5><ul><li>调用Jni的方法</li></ul><p><img src="http://p0sgkjh7x.bkt.clouddn.com/A66025A1-356E-414D-9CEE-E9FC8592584E.png" alt="具体调用"></p><ul><li>运行成功后我们可以看到，说明我们调用成功</li></ul><p><img src="http://p0sgkjh7x.bkt.clouddn.com/84E09BA1-1855-4685-8439-CCD1146227B6.png" alt="运行结果"></p><h5 id="得到so文件"><a href="#得到so文件" class="headerlink" title="得到so文件"></a>得到so文件</h5><blockquote><p>这边我们是自己使用项目中的C方法，但是实际项目中很多时候都是把方法封装成so文件进行开发，类似于jar包和arr包</p></blockquote><p>我们这边直接切换项目的展示形式：<strong>Android-&gt;Project</strong><br>然后查看build-&gt;intermediates-&gt;ndk-&gt;debug-&gt;lib</p><p><img src="http://p0sgkjh7x.bkt.clouddn.com/4421444A-9F7A-427E-AF44-B12D012804AF.png" alt="ndk"></p><p>这边的<strong>libMuBaiYs7.so</strong>就是我们根据项目中的<code>jnitest.c</code>文件封装出来的<strong>so</strong>文件</p><p>我们可以把这里的<strong>so</strong>文件复制到其他项目中的<strong>lib</strong>或者是<strong>jniLibs</strong>文件中进行使用</p><blockquote><p>需要注意的是不能单独复制<strong>so</strong>文件，要将各个CPU对应的<strong>so</strong>文件分别复制出来到文件中</p></blockquote><p>这边只是NDK和Jni的入门使用，关于Jni常用的类型和方法会在其他的时间进行学习介绍</p><p>未完待续</p><hr><p>参考链接：</p><p><a href="https://developer.android.google.cn/ndk/index.html" target="_blank" rel="noopener">Android NDK</a></p><p><a href="https://www.jianshu.com/p/aba734d5b5cd" target="_blank" rel="noopener">Android JNI编程—JNI基础</a></p><p><a href="https://www.jianshu.com/p/ac00d59993aa" target="_blank" rel="noopener">Android NDK开发：JNI基础篇</a></p><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/2017/0401/7769.html" target="_blank" rel="noopener">Android Studio jni开发入门——看我就够了！</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近发现光看源码的过程是在太枯燥了，准备开始以博客的形式来解读源码，一方面是为了能让自己更好的巩固知识点，一方面是为了能展(zhuang)现(bi)下自己&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天要来说说&lt;strong&gt;JNI&lt;/strong
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从比特币中浅谈区块链技术</title>
    <link href="http://yoursite.com/2018/03/07//%E4%BB%8E%E6%AF%94%E7%89%B9%E5%B8%81%E4%B8%AD%E6%B5%85%E8%B0%88%E5%8C%BA%E5%9D%97%E9%93%BE%E6%8A%80%E6%9C%AF//"/>
    <id>http://yoursite.com/2018/03/07//从比特币中浅谈区块链技术//</id>
    <published>2018-03-07T12:50:02.594Z</published>
    <updated>2018-03-29T12:13:33.926Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>昨天的<strong>CPIH</strong>(中国医药控股有限公司)疯狂的涨幅566%，瞬间看懵了，有消息称是因为被收购了才导致的暴涨，(到后来已经慢慢下跌，最后收盘时涨幅137%），说实话真的是跟过山车一样，心脏病都能给你吓出来😶</p></blockquote><h3 id="比特币"><a href="#比特币" class="headerlink" title="比特币"></a>比特币</h3><blockquote><p>比特币(bitcoin)的概念是中本聪在09年提出的，它是数字货币</p></blockquote><p>17年的比特币 比特币就跟过山车一样</p><p>我们想通过比特币的交易来谈谈什么是区块链</p><h3 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h3><p>来自维基百科对区块链的定义</p><blockquote><p>区块链：(英语：blockchain)是用分布式数据库识别、传播和记载信息的智能化对等网络，也称为价值互联网，中本聪在08年与《比特币白皮书》中提出了”区块链”概念，并在09年创立了比特币社会网络，开发出第一个区块，即”创世区块”。</p></blockquote><p>区块链的本质是解决信任问题，降低信任成本的技术方案，目的是为了<strong>去中心化</strong>，<strong>去信用中介</strong>，它的核心是<strong>一堆个体</strong>，是通过<strong>去中心化</strong>和<strong>去信任</strong>的方式<strong>集体</strong>维护一个可靠数据库(加密安全性)，简单来说就是<strong>分布式记账</strong>，这个账本<strong>不可撤销</strong>，<strong>不能修改</strong>，它实际上也是比特币的底层技术。</p><p><em>任意节点损坏，不会影响其他节点(损坏的节点不需要理他)</em></p><p>大数据：数据的来源维度多，不是数据多</p><p>共识机制：所有人都是认可的</p><p>大数据是牺牲一致性来换取可用性和分区容忍性的，而区块链却先优先保证一致性</p><p>去中心化和共识机制的矛盾，需要注意平衡</p><h3 id="区块链的发展"><a href="#区块链的发展" class="headerlink" title="区块链的发展"></a>区块链的发展</h3><h4 id="比特币-（1-0）"><a href="#比特币-（1-0）" class="headerlink" title="比特币 （1.0）"></a>比特币 （1.0）</h4><h4 id="数字资产和智能合约-（2-0）"><a href="#数字资产和智能合约-（2-0）" class="headerlink" title="数字资产和智能合约 （2.0）"></a>数字资产和智能合约 （2.0）</h4><h4 id="区块链大社会-3-0"><a href="#区块链大社会-3-0" class="headerlink" title="区块链大社会  (3.0)"></a>区块链大社会  (3.0)</h4><h4 id="ICO金融"><a href="#ICO金融" class="headerlink" title="ICO金融"></a>ICO金融</h4><h4 id="新能源模式"><a href="#新能源模式" class="headerlink" title="新能源模式"></a>新能源模式</h4><h4 id="智能社区"><a href="#智能社区" class="headerlink" title="智能社区"></a>智能社区</h4><h4 id="供应链管理"><a href="#供应链管理" class="headerlink" title="供应链管理"></a>供应链管理</h4><h3 id="区块链的问题"><a href="#区块链的问题" class="headerlink" title="区块链的问题"></a>区块链的问题</h3><h4 id="性能和容量问题："><a href="#性能和容量问题：" class="headerlink" title="性能和容量问题："></a>性能和容量问题：</h4><ul><li><p>去中心化和共识机制的矛盾</p></li><li><p>账本存储容量和处理性能的矛盾</p></li></ul><h4 id="安全性问题"><a href="#安全性问题" class="headerlink" title="安全性问题"></a>安全性问题</h4><ul><li><p>51%攻击</p></li><li><p>私钥与终端安全</p></li><li><p>共识机制的安全</p></li></ul><h4 id="尚未建议统一的标准"><a href="#尚未建议统一的标准" class="headerlink" title="尚未建议统一的标准"></a>尚未建议统一的标准</h4><h4 id="衍生市场混乱"><a href="#衍生市场混乱" class="headerlink" title="衍生市场混乱"></a>衍生市场混乱</h4><h3 id="从企业的角度："><a href="#从企业的角度：" class="headerlink" title="从企业的角度："></a>从企业的角度：</h3><ul><li>没有找到大的落地应用场景</li><li>区块链急速目前不够成熟，无法支撑某些业务领域</li><li>行业人才匮乏，一般公司无法组建区块链技术团队开发产品</li><li>公众的认知相对较少，接受度不高</li><li>高能耗</li><li>数据库存储空间</li><li>处理大规模交易的抗压能力</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;昨天的&lt;strong&gt;CPIH&lt;/strong&gt;(中国医药控股有限公司)疯狂的涨幅566%，瞬间看懵了，有消息称是因为被收购了才导致的暴涨，(到后来已经慢慢下跌，最后收盘时涨幅137%），说实话真的是跟过山车一样，心脏病都能给你吓出来😶&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android项目中为什么不推荐使用枚举</title>
    <link href="http://yoursite.com/2018/03/07//Android%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E6%9E%9A%E4%B8%BE//"/>
    <id>http://yoursite.com/2018/03/07//Android项目中为什么不推荐使用枚举//</id>
    <published>2018-03-07T12:50:02.593Z</published>
    <updated>2018-03-07T12:50:02.593Z</updated>
    
    <content type="html"><![CDATA[<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;枚举&quot;&gt;&lt;a href=&quot;#枚举&quot; class=&quot;headerlink&quot; title=&quot;枚举&quot;&gt;&lt;/a&gt;枚举&lt;/h3&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>物联网通信-WiFi/BT/ZigBee芯片级方案解析</title>
    <link href="http://yoursite.com/2018/03/07//%E7%89%A9%E8%81%94%E7%BD%91%E9%80%9A%E4%BF%A1-WiFi/BT/ZigBee%E8%8A%AF%E7%89%87%E7%BA%A7%E6%96%B9%E6%A1%88%E8%A7%A3%E6%9E%90//"/>
    <id>http://yoursite.com/2018/03/07//物联网通信-WiFi/BT/ZigBee芯片级方案解析//</id>
    <published>2018-03-07T12:50:02.592Z</published>
    <updated>2018-10-11T07:08:55.220Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>WLAN(Wireless Local Area Network)无线局域网络，是一个概念，网络技术术语，IEEE802.11标准是无线局域网最通用的标准<br>Wifi(Wireless Fidelity)是设备商成立的一个联盟，负责测试认证，是使用802.11技术实现的</p></blockquote><blockquote><p>目前在国内采用ZigBee协议智能家居的有3家公司的芯片，恩智浦（NXP）公司（小米智能家居采用的就是该公司的ZigBee芯片），TI公司（德州仪器）CC2530芯片（国内95%以上的公司采用该ZigBee芯片），芯科（Silicon Labs）公司（国内只有极少数公司采用该公司芯片，如聪明屋智能家居采用的是该公司的EM357芯片），该芯片属于ZigBee芯片领域的工业级高性能级别，应用到智能家居居有绝对的优势，规避了传统ZigBee芯片智能家居组网规模小、易丢包不稳定的顽疾。事实证明芯科芯片的智能网关，在保证智能家居系统稳定运行的前提下可以携带120个以上的节点，TI和恩智浦的只能带30个以内的节点。<br>另外芯科（Silicon Labs）公司又发布EFR32MG系列ZigBee芯片，其中部分芯片能同时支持4种无线协议：ZigBee、Thread、BLE（蓝牙）、Proprietary（sub GHZ，小无线），说通俗一点就是用芯科（Silicon Labs）ZigBee芯片开发的ZigBee智能家居可以兼容Thread、BLE（蓝牙）、Proprietary（sub GHZ，小无线）这3种通讯协议的产品，能和这3种通信协议的设备互联互通，技术创新遥遥领先，所以说要做好ZigBee技术智能家居，芯片选择至关重要。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;WLAN(Wireless Local Area Network)无线局域网络，是一个概念，网络技术术语，IEEE802.11标准是无线局域网最通用的标准&lt;br&gt;Wifi(Wireless Fidelity)是设备商成立的一个联盟，负责测试认证，是
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>项目发布到公共的jcenter仓库</title>
    <link href="http://yoursite.com/2018/03/07//%E9%A1%B9%E7%9B%AE%E5%8F%91%E5%B8%83%E5%88%B0%E5%85%AC%E5%85%B1%E7%9A%84jcenter%E4%BB%93%E5%BA%93//"/>
    <id>http://yoursite.com/2018/03/07//项目发布到公共的jcenter仓库//</id>
    <published>2018-03-07T12:50:02.592Z</published>
    <updated>2018-03-07T12:50:02.592Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目所需的步骤"><a href="#项目所需的步骤" class="headerlink" title="项目所需的步骤"></a>项目所需的步骤</h3><h4 id="一、添加插件"><a href="#一、添加插件" class="headerlink" title="一、添加插件"></a>一、添加插件</h4><h5 id="在项目目录的build-gradle-中的-dependencies-添加："><a href="#在项目目录的build-gradle-中的-dependencies-添加：" class="headerlink" title="在项目目录的build.gradle 中的 dependencies 添加："></a>在项目目录的build.gradle 中的 dependencies 添加：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">classpath &quot;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.5&quot; </span><br><span class="line">classpath &apos;com.github.dcendents:android-maven-gradle-plugin:1.4.1&apos;</span><br></pre></td></tr></table></figure><h4 id="二、配置gradle"><a href="#二、配置gradle" class="headerlink" title="二、配置gradle"></a>二、配置gradle</h4><h5 id="同时在需要添加到jcenter的libary的build-gradle根目录添加："><a href="#同时在需要添加到jcenter的libary的build-gradle根目录添加：" class="headerlink" title="同时在需要添加到jcenter的libary的build.gradle根目录添加："></a>同时在需要添加到jcenter的libary的build.gradle根目录添加：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;com.github.dcendents.android-maven&apos; </span><br><span class="line">apply plugin: &apos;com.jfrog.bintray&apos;</span><br><span class="line">version = &quot;1.0.1&quot; //这里的version是可以更新的版本号*</span><br></pre></td></tr></table></figure><h5 id="1-在local-properties添加用户名和key"><a href="#1-在local-properties添加用户名和key" class="headerlink" title="(1)在local.properties添加用户名和key"></a>(1)在local.properties添加用户名和key</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bintray.user=openproject </span><br><span class="line">// your bintrayuser name </span><br><span class="line">bintray.apikey=****** </span><br><span class="line">// your bintray api key`</span><br></pre></td></tr></table></figure><h5 id="2-继续在根目录添加："><a href="#2-继续在根目录添加：" class="headerlink" title="(2)继续在根目录添加："></a>(2)继续在根目录添加：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def siteUrl = &apos;https://github.com/MoMuBai/Test&apos; </span><br><span class="line">// #修改# // 项目的主页地址，我这里是我的PickerView项目在github的链接地址 </span><br><span class="line">def gitUrl = &apos;https://github.com/MoMuBai/Test.git&apos; </span><br><span class="line">// #修改# // 项目 git 地址，我这里同样是用Github上的git地址 </span><br><span class="line">group = &quot;com.mubai&quot; </span><br><span class="line">// #修改# // 组名称</span><br></pre></td></tr></table></figure><h5 id="3-打包javadocjar和sourcejar"><a href="#3-打包javadocjar和sourcejar" class="headerlink" title="(3)打包javadocjar和sourcejar"></a>(3)打包javadocjar和sourcejar</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">install &#123; </span><br><span class="line">    repositories.mavenInstaller &#123;</span><br><span class="line">        // This generates POM.xml with proper parameters</span><br><span class="line">        pom &#123;</span><br><span class="line">            project &#123;</span><br><span class="line">                packaging &apos;aar&apos;</span><br><span class="line">                name &apos;Less Code For Android&apos;</span><br><span class="line">                url siteUrl</span><br><span class="line">                licenses &#123;</span><br><span class="line">                    license &#123;</span><br><span class="line">                        name &apos;The Apache Software License, Version 2.0&apos;</span><br><span class="line">                        url &apos;http://www.apache.org/licenses/LICENSE-2.0.txt&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                developers &#123;</span><br><span class="line">                    developer &#123;</span><br><span class="line">                        id &apos;mubai&apos;</span><br><span class="line">                        name &apos;mubai.lzw&apos;</span><br><span class="line">                        email &apos;quickly520@126.com&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                scm &#123;</span><br><span class="line">                    connection gitUrl</span><br><span class="line">                    developerConnection gitUrl</span><br><span class="line">                    url siteUrl</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-打包javadocjar和sourcejar"><a href="#4-打包javadocjar和sourcejar" class="headerlink" title="(4)打包javadocjar和sourcejar"></a>(4)打包javadocjar和sourcejar</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">task sourcesJar(type: Jar) &#123;</span><br><span class="line">    from android.sourceSets.main.java.srcDirs</span><br><span class="line">    classifier = &apos;sources&apos;</span><br><span class="line">&#125;</span><br><span class="line">task javadoc(type: Javadoc) &#123;</span><br><span class="line">    source = android.sourceSets.main.java.srcDirs</span><br><span class="line">    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))</span><br><span class="line">&#125;</span><br><span class="line">task javadocJar(type: Jar, dependsOn: javadoc) &#123;</span><br><span class="line">    classifier = &apos;javadoc&apos;</span><br><span class="line">    from javadoc.destinationDir</span><br><span class="line">&#125;</span><br><span class="line">artifacts &#123;</span><br><span class="line">    archives javadocJar</span><br><span class="line">    archives sourcesJar</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-上传到Jcenter仓库-需要去从local-properties中读取"><a href="#5-上传到Jcenter仓库-需要去从local-properties中读取" class="headerlink" title="(5)上传到Jcenter仓库 需要去从local.properties中读取"></a>(5)上传到Jcenter仓库 需要去从local.properties中读取</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Properties properties = new Properties()</span><br><span class="line">properties.load(project.rootProject.file(&apos;local.properties&apos;).newDataInputStream())</span><br><span class="line">bintray &#123;</span><br><span class="line">    user = properties.getProperty(&quot;bintray.user&quot;)</span><br><span class="line">    key = properties.getProperty(&quot;bintray.apikey&quot;)</span><br><span class="line">    configurations = [&apos;archives&apos;]</span><br><span class="line">    pkg &#123;</span><br><span class="line">        repo = &quot;maven&quot;</span><br><span class="line">        name = &quot;test-library&quot;                // project name in jcenter</span><br><span class="line">        websiteUrl = siteUrl</span><br><span class="line">        vcsUrl = gitUrl</span><br><span class="line">        licenses = [&quot;Apache-2.0&quot;]</span><br><span class="line">        publish = true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="三、执行命令"><a href="#三、执行命令" class="headerlink" title="三、执行命令"></a>三、执行命令</h4><h5 id="通过命令进入项目目录执行命令"><a href="#通过命令进入项目目录执行命令" class="headerlink" title="通过命令进入项目目录执行命令"></a>通过命令进入项目目录执行命令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./gradlew javadocJar</span><br><span class="line">./gradlew sourcesJar</span><br><span class="line">./gradlew install</span><br><span class="line">./gradlew bintrayUpload</span><br></pre></td></tr></table></figure><h3 id="Bintray所需的步骤"><a href="#Bintray所需的步骤" class="headerlink" title="Bintray所需的步骤"></a><a href="https://bintray.com/" target="_blank" rel="noopener">Bintray</a>所需的步骤</h3><h4 id="一、注册账号也可以通过Git直接登录"><a href="#一、注册账号也可以通过Git直接登录" class="headerlink" title="一、注册账号也可以通过Git直接登录"></a>一、注册账号也可以通过Git直接登录</h4><h4 id="二、添加一个新的Repository-名字跟在gradle配置的一样"><a href="#二、添加一个新的Repository-名字跟在gradle配置的一样" class="headerlink" title="二、添加一个新的Repository(名字跟在gradle配置的一样)"></a>二、添加一个新的Repository(名字跟在gradle配置的一样)</h4><h4 id="三、在gradle命令执行完成后可以到Bintray进行提交审核-一般几个小时"><a href="#三、在gradle命令执行完成后可以到Bintray进行提交审核-一般几个小时" class="headerlink" title="三、在gradle命令执行完成后可以到Bintray进行提交审核(一般几个小时)"></a>三、在gradle命令执行完成后可以到Bintray进行提交审核(一般几个小时)</h4><h4 id="四、审核通过之后就可以进行依赖的添加使用了"><a href="#四、审核通过之后就可以进行依赖的添加使用了" class="headerlink" title="四、审核通过之后就可以进行依赖的添加使用了"></a>四、审核通过之后就可以进行依赖的添加使用了</h4><p><code>compile &#39;com.mubai:library:1.0.1&#39;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;项目所需的步骤&quot;&gt;&lt;a href=&quot;#项目所需的步骤&quot; class=&quot;headerlink&quot; title=&quot;项目所需的步骤&quot;&gt;&lt;/a&gt;项目所需的步骤&lt;/h3&gt;&lt;h4 id=&quot;一、添加插件&quot;&gt;&lt;a href=&quot;#一、添加插件&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android反编译</title>
    <link href="http://yoursite.com/2018/03/07//Android%E5%8F%8D%E7%BC%96%E8%AF%91//"/>
    <id>http://yoursite.com/2018/03/07//Android反编译//</id>
    <published>2018-03-07T12:50:02.591Z</published>
    <updated>2018-03-07T12:50:02.591Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android屏幕适配</title>
    <link href="http://yoursite.com/2018/03/07//Android%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D//"/>
    <id>http://yoursite.com/2018/03/07//Android屏幕适配//</id>
    <published>2018-03-07T12:50:02.590Z</published>
    <updated>2018-03-07T12:50:02.591Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>实际上很早就想写关于Android屏幕适配的总结了，但是由于各种各样的理由推迟了</p></blockquote><h4 id="什么是屏幕适配"><a href="#什么是屏幕适配" class="headerlink" title="什么是屏幕适配"></a>什么是屏幕适配</h4><p>屏幕适配即在不同分辨率、尺寸、比例的设备上显示达到一样的效果</p><h4 id="为什么要屏幕适配"><a href="#为什么要屏幕适配" class="headerlink" title="为什么要屏幕适配"></a>为什么要屏幕适配</h4><p>由于Android系统的开放性，任何用户、开发者、OEM厂商、运营商都可以对Android进行定制，修改成他们想要的样子，这种情况下导致了Android系统的碎片化严重</p><blockquote><p>碎片化：系统碎片化(小米MIUI、华为EMUI、魅族flyme)、屏幕大小碎片化(5.0、5.5、6.0)、屏幕分辨率碎片化(320x480、480x800、720x1280、1080x1920)</p><p>这里有Android碎片化的数据：<a href="https://opensignal.com/reports/2014/android-fragmentation/" target="_blank" rel="noopener">戳这里</a></p></blockquote><h4 id="如何进行屏幕适配"><a href="#如何进行屏幕适配" class="headerlink" title="如何进行屏幕适配"></a>如何进行屏幕适配</h4><h5 id="在屏幕适配开始前，我们需要对Android的一些屏幕相关单位有所了解"><a href="#在屏幕适配开始前，我们需要对Android的一些屏幕相关单位有所了解" class="headerlink" title="在屏幕适配开始前，我们需要对Android的一些屏幕相关单位有所了解"></a>在屏幕适配开始前，我们需要对Android的一些屏幕相关单位有所了解</h5><ul><li>像素：单位px，屏幕上的点，我们看到的图像都是由一个个小点构成的</li><li>屏幕尺寸：屏幕上对角线的长度，单位是英寸，一英寸为2.54厘米，现在市场上常见的有4.7、5.0、5.5、6.0等尺寸的手机</li><li>屏幕分辨率：横纵方向上的像素点数，如1920*1080，即纵向上有1920个像素点，横向上有1080个像素点</li><li>屏幕每英寸点数：单位dpi，为屏幕分辨率/屏幕尺寸所得的值，如一个1920*1080的手机，它的纵向尺寸为3英寸，横向尺寸为5.3英寸，那么它的像素密度为1080/3=360dpi，屏幕分辨率越高，尺寸越小，那么它的像素密度就越高</li><li>屏幕像素密度：density = dpi/160</li><li>屏幕像素无关密度：单位dp或者是dip，与物流像素点无关，是Android特有的单位，是为了保证在不同屏幕像素密度的设备上显示相同的效果</li><li>屏幕独立比例像素：单位sp，类似dp，一般是用来设置文字大小</li></ul><p>这里用张表格来各个单位之间的关系</p><table><thead><tr><th>密度类型</th><th style="text-align:center">代表的分辨率（px）</th><th style="text-align:right">屏幕每英寸点数（dpi）</th><th style="text-align:right">屏幕密度（density）</th><th style="text-align:right">换算（px/dp）</th><th style="text-align:right">比例</th></tr></thead><tbody><tr><td>低密度（ldpi）</td><td style="text-align:center">240x320</td><td style="text-align:right">120</td><td style="text-align:right">0.75</td><td style="text-align:right">1dp = 0.75px</td><td style="text-align:right">3</td></tr><tr><td>中密度（mdpi）</td><td style="text-align:center">320x480</td><td style="text-align:right">160</td><td style="text-align:right">1</td><td style="text-align:right">1dp = 1px</td><td style="text-align:right">4</td></tr><tr><td>高密度（hdpi）</td><td style="text-align:center">480x800</td><td style="text-align:right">240</td><td style="text-align:right">1.5</td><td style="text-align:right">1px = 1.5dp</td><td style="text-align:right">6</td></tr><tr><td>超高密度（xhdpi）</td><td style="text-align:center">720x1280</td><td style="text-align:right">320</td><td style="text-align:right">2</td><td style="text-align:right">1dp = 2px</td><td style="text-align:right">8</td></tr><tr><td>超超高密度（xxhdpi）</td><td style="text-align:center">1080x1920</td><td style="text-align:right">480</td><td style="text-align:right">3</td><td style="text-align:right">1dp = 3px</td><td style="text-align:right">12</td></tr></tbody></table><h5 id="如何适配"><a href="#如何适配" class="headerlink" title="如何适配"></a>如何适配</h5><hr><p>参考链接</p><p><a href="https://www.jianshu.com/p/ec5a1a30694b" target="_blank" rel="noopener">Android 屏幕适配：最全面的解决方案</a></p><p><a href="http://blog.csdn.net/zhaokaiqiang1992/article/details/45419023#%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8" target="_blank" rel="noopener">Android屏幕适配全攻略(最权威的官方适配指导)</a></p><p><a href="http://stormzhang.com/android/2014/05/16/android-screen-adaptation/" target="_blank" rel="noopener">Android 屏幕适配</a></p><p><a href="http://blog.csdn.net/guolin_blog/article/details/8830286" target="_blank" rel="noopener">Android官方提供的支持不同屏幕大小的全部方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;实际上很早就想写关于Android屏幕适配的总结了，但是由于各种各样的理由推迟了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;什么是屏幕适配&quot;&gt;&lt;a href=&quot;#什么是屏幕适配&quot; class=&quot;headerlink&quot; title=&quot;什么是
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>阿里云大使行走中</title>
    <link href="http://yoursite.com/2018/03/07//%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A7%E4%BD%BF%E8%A1%8C%E8%B5%B0%E4%B8%AD//"/>
    <id>http://yoursite.com/2018/03/07//阿里云大使行走中//</id>
    <published>2018-03-07T12:50:02.589Z</published>
    <updated>2018-03-07T12:50:02.590Z</updated>
    
    <content type="html"><![CDATA[<p>💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰</p><p><strong>满满的$$$镇楼</strong></p><blockquote><p>在使用阿里云提供的域名服务中偶然发现云大使这个组织，然后发现这是个让其他的人通过使用你的幸运券去购买阿里云产品，你就可以获得对应的返佣比例，最高可达30%(如被推荐的人新购买或者是升级了自己的域名服务。支付了10000元，则云大使就可以获得3000元的返佣)</p></blockquote><p>说的简单点，云大使就是<strong>分享幸运券-&gt;坐等返佣</strong>的过程，通俗点就是个<strong>赚钱，钱，钱</strong>的过程，重要的话要说三遍</p><blockquote><p>当然是要有人使用了你分享的幸运券的前提下</p></blockquote><p>我们现在就来说说如何用云大使实现我们的目标：<strong>月入百万、荣登CEO、迎娶白富美</strong>我的<strong><a href="https://promotion.aliyun.com/ntms/act/ambassador/sharetouser.html?userCode=2j1udai5&amp;utm_source=2j1udai5" target="_blank" rel="noopener">幸运券</a></strong></p><h5 id="1-加入云大使"><a href="#1-加入云大使" class="headerlink" title="1.加入云大使"></a>1.加入云大使</h5><p>首先需要你有<a href="https://www.aliyun.com/?utm_medium=text&amp;utm_source=bdbrand&amp;utm_campaign=bdbrand&amp;utm_content=se_32492" target="_blank" rel="noopener">阿里云</a>的账号，然后你就可以通过<a href="https://promotion.aliyun.com/ntms/yunparter/zhaomu.html?spm=5176.bbsr569878.0.0.ZUuEom" target="_blank" rel="noopener">云大使报名入口</a>加入云大使</p><h5 id="2-分享使用幸运券及好处"><a href="#2-分享使用幸运券及好处" class="headerlink" title="2.分享使用幸运券及好处"></a>2.分享使用幸运券及好处</h5><ul><li><p>网页端：加入云大使后会对应的<strong><a href="https://expense.console.aliyun.com/#/ambassador/ticket/product" target="_blank" rel="noopener">生成你的幸运券</a></strong>，然后你可以通过复制<strong><a href="https://promotion.aliyun.com/ntms/act/ambassador/sharetouser.html?userCode=2j1udai5&amp;utm_source=2j1udai5" target="_blank" rel="noopener">你的幸运券</a></strong>分享出去</p></li><li><p>App端：<strong>阿里云App-&gt;我的-&gt;推开奖励-&gt;分享全部产品幸运券</strong>然后就可以通过其他方式分享到支付宝、钉钉、微信、QQ等</p></li></ul><h5 id="3-使用幸运券"><a href="#3-使用幸运券" class="headerlink" title="3.使用幸运券"></a>3.使用幸运券</h5><ul><li><p>如何使用幸运券：其他人在选择<strong>阿里云产品-&gt;购买-&gt;确认订单的环节-&gt;使用云大使的幸运券-&gt;提交订单-&gt;完成支付</strong>，整个流程后即可认为幸运券被使用</p></li><li><p>使用幸运券的好处：</p><ul><li>幸运券实际上是有优惠的，只是它的优惠金额是随机的</li><li>订单支付大于0元可参与抽奖</li><li>首购ecs大于1000元可参与抽奖</li></ul></li></ul><blockquote><p>当前阿里云可以使用幸运券的产品共29款</p></blockquote><h5 id="4-坐等返佣"><a href="#4-坐等返佣" class="headerlink" title="4.坐等返佣"></a>4.坐等返佣</h5><p>18年1月返利新规<strong>【返佣率高达30%无封顶返利】</strong></p><p><img src="http://p0sgkjh7x.bkt.clouddn.com/47499416-AC74-4B5C-A057-CFB5E0D3F738.png" alt="1月份新规图"></p><ul><li><p>返利时间：一般情况下当月的奖励将会在下下月的20号左右返利，如1月月份推荐的返利将在18年3月20日左右发放，（一般情况下只会提前不会延后）返利将会发放到绑定的支付宝账号中</p></li><li><p>需要注意:要完成<strong>1实名认证-&gt;2.绑定支付宝-&gt;3.现金购云产品&gt;=100元(第3条在校学生通过学生认证除外)</strong>才能够完成返利提现</p></li></ul><hr><blockquote><p>附上阿里云可以使用幸运券产品图(18年1月份新图)，总有一款适合你，</p></blockquote><p><img src="http://p0sgkjh7x.bkt.clouddn.com/8406A892-DDBD-4345-83C8-24A9AE3D26A7.png" alt="图1"><br><img src="http://p0sgkjh7x.bkt.clouddn.com/32693FE6-4454-4440-B48B-BAEB2A81FCA4.png" alt="图2"><br><img src="http://p0sgkjh7x.bkt.clouddn.com/D7D61595-2640-4918-B4AC-1FB3A86C485C.png" alt="图3"></p><p>可以根据自己的需要选择云产品，使用我的<strong><a href="https://promotion.aliyun.com/ntms/act/ambassador/sharetouser.html?userCode=2j1udai5&amp;utm_source=2j1udai5" target="_blank" rel="noopener">幸运券</a></strong>来实现你的幸运产品</p><p>参考链接</p><p><a href="https://bbs.aliyun.com/read/325184.html?spm=5176.2020520127.100133.6.niQOZ8" target="_blank" rel="noopener">大神引路–新手云大使入门导引</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰💰&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;满满的$$$镇楼&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在使用阿里云提供的域名服务中偶然发现云大使这个组织，然后发现这是个让其他的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Me</title>
    <link href="http://yoursite.com/2018/03/07//Me//"/>
    <id>http://yoursite.com/2018/03/07//Me//</id>
    <published>2018-03-07T12:50:02.589Z</published>
    <updated>2018-10-26T08:55:11.801Z</updated>
    
    <content type="html"><![CDATA[<h3 id="个人简历"><a href="#个人简历" class="headerlink" title="个人简历"></a>个人简历</h3><ul><li><strong>姓名：</strong> 林志文</li><li><strong>花名：</strong> 沐白</li><li><strong>Email：</strong> <a href="mailto:quickly520@126.com" target="_blank" rel="noopener">quickly520@126.com</a></li></ul><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li><p>​1.熟悉 android 体系结构，常用mvc+mvp+mvvm等的架构模式，模块化、组件化开发方式</p></li><li><p>2.http+https+socket协议，常用加密解密算法(数据安全性)，代码混淆(代码安全性)， 多线程+多进程，线程+进程间通信(管道、JNI、信号量等)</p></li><li><p>3.高性能+多并发的app开发(性能优化+内存优化+apk优化)</p></li><li><p>4.对敏捷开发+单元测试的开发模式有一定了解</p></li><li><p>5.多机型适配+多屏幕+多系统+多渠道的适配</p></li><li><p>6.android view绘制、touch事件机制等流程</p></li><li><p>7.热衷于熟悉业务流程再去开发</p></li><li><p>8.代码重构和良好的编码风格</p></li><li><p>9.kotlin开发、快应用、小程序、区块链应用的学习开发</p></li></ul><h4 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h4><ul><li><strong>杭州筑家易网络科技股份有限公司 2016.8-至今</strong></li></ul><blockquote><p> <strong>产品研发部</strong></p></blockquote><p>智能IOT项目，包括wifi设备，zigbee子设备，蓝牙设备的接入，对接接触了包括阿里云iot，鸿雁，顺舟，涂鸦，控家，云之屋等第三方接入平台和接入厂家。</p><p>其他几个app(筑家易、经纪通、中策通、楼掌柜)的版本更新迭代，提升 app 的产品性能 和代码的优化，房产数据的挖掘，用户体验的回馈总结，对产品理念的意见等</p><ul><li><strong>杭州一幅画网络科技有限公司 2016.4-2016.7</strong></li></ul><blockquote><p><strong>技术部</strong></p></blockquote><p>创业公司，以画为切入点提供多种艺术品的展览和销售，前期app主要是推翻原有的架构，功能需求重新设计和体现，迭代了多个版本，后续主要在于提升性能，用户体验理念等，同时带新人开发</p><ul><li><strong>北京美若瞳网络科技有限公司 2015.8-2016.3</strong></li></ul><blockquote><p>技术部</p></blockquote><p>项目小组组长，对接项目开发，调控整个开发进度，进度的管理，重要模块的开发，对接产品需求商榷，后台需求接口定义，app上线第一个版本以及后续的版本更新迭代</p><h4 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h4><ul><li>筑家智能</li></ul><blockquote><p>IOT项目的app开发，通过智能设备（wifi设备，zigbee子设备，蓝牙设备）构建整个智能家居、社区的生活方式，项目初期集成了阿里云iot、鸿雁的设备，萤石的猫眼摄像头，清华大学的动态舒适性算法等厂商厂家的一些单品设备的接入，中期服务端搭建自己的云平台接入以满足不同的厂商厂家的需求，包括顺舟，控家等厂家设备提供商，同时接入阿里飞燕平台，定制化、组件化开发app来满足不同三方的需求和业务！</p></blockquote><ul><li>筑家易</li></ul><p>项目以楼源信息，社区服务，家居家装为主要结构，后期接入云之屋智能iot云平台服务家居生活。项目主要是以 mvp+retrofit+rxjava 为框架，版本迭代为了解偶通过ARouter作为组件化的通信框架，提高了app 的复用性，提高了性能体验和开发速度！</p><blockquote><p>项目后期接入了智能家居模块</p></blockquote><ul><li>经纪通</li></ul><p>经纪人使用管理平台，主要是对经纪人楼盘销售，客户管理，佣金进度，数据记录等为主要功能，项目前期是以uil+mvc+asyncTask等较老的框架为基础的 app，后续迭代中由于不好维护，对整体架构进行升级更新，以较为流行通用的mvp结合mvvm，同时引入rxjava，对于链路的简洁和拓展有了很大的帮助</p><blockquote><p>项目后面更新较少，后来因为原代码混乱、耦合性太高，推到重做了一版</p></blockquote><ul><li>楼掌柜分销</li></ul><p>具有多个角色的楼盘销售管理平台，项目初期以java语言进行开发，后期开始使用kotlin来辅助开发</p><blockquote><p>项目原先是以Java为开发语言，后来接触了kotlin，因为更加的安全、简洁然后慢慢的被吸引</p></blockquote><ul><li>一幅画</li></ul><blockquote><p>结构为mvp+fresco+okhttp结合使用的项目，由于产品的迭代过与频繁，整个框架也需要跟着产品变化不断变化，同时由于没有专门的测试，引入简单的单元测试来减少bug</p></blockquote><ul><li>美若</li></ul><blockquote><p>以线上销售眼镜为主要业务的项目，项目通过 mvc+volley+uil+autoLayout 框架来搭建，接入了微信，支付宝第三方支付，支持切换第三方字体！同时加入了一些特殊的动画和效果</p></blockquote><h4 id="自我评价"><a href="#自我评价" class="headerlink" title="自我评价"></a>自我评价</h4><p>安卓开发，目前工作重点主要在 IoT 项目上，对接过阿里云 IoT、鸿雁、顺 舟、涂鸦、控家、云之屋等第三方平台和厂家，熟悉 wifi 设备、zjebee 设 备、网关、socket 等之间的通信协议，熟悉安卓体系结构、常用的架构模式， 目前在着力于 kotlin 开发，快应用、小程序和区块链学习，喜欢跑步，参加过 马拉松!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;个人简历&quot;&gt;&lt;a href=&quot;#个人简历&quot; class=&quot;headerlink&quot; title=&quot;个人简历&quot;&gt;&lt;/a&gt;个人简历&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;姓名：&lt;/strong&gt; 林志文&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;花名：&lt;/strong&gt; 沐
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>浅谈安卓项目中的从MVC到MVP在到MVVM架构模式</title>
    <link href="http://yoursite.com/2018/03/07//%E6%B5%85%E8%B0%88%E5%AE%89%E5%8D%93%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E4%BB%8EMVC%E5%88%B0MVP%E5%9C%A8%E5%88%B0MVVM%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F//"/>
    <id>http://yoursite.com/2018/03/07//浅谈安卓项目中的从MVC到MVP在到MVVM架构模式//</id>
    <published>2018-03-07T12:50:02.588Z</published>
    <updated>2018-03-07T12:50:02.588Z</updated>
    
    <content type="html"><![CDATA[<h5 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h5><blockquote><p>MVC(模型Model-视图View-控制器Controller)的缩写，是一种软件的设计典范。主要是用来将业务逻辑和数据以及界面进行分离的架构方式。MVC最早是用来桌面程序上的，已经发展了几十年了，可以说得上是最经典的框架模式。</p></blockquote><p>实际上MVC没有一个具体标准的说法，每个人都有着不同的理解！具体可以看下<a href>混乱的MVC架构</a></p><ul><li>View：对应布局文件.xml</li><li>Model：业务逻辑和实体模型</li><li>Controller：对应于Activity</li></ul><p>View可以与Model直觉交互<br>Controller是基于行为的，并且可以被多个View共享，可以负责决定显示哪个View</p><h5 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h5><blockquote><p>MVP(模型Model-视图View-主持者Presenter)是MVC的进一步改进，原来的MVC的三层结构之间的联系性较高，对View和Model层来说分离的不够彻底。MVP中的P层则是完全起到连接V-M的作用，M和V层之间没有相互操作的关系。</p></blockquote><p>在项目中，mvp是需要我们自己去封装</p><h5 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h5><blockquote><p>MVVM(模型Model-视图View-视图模型ViewModel)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;MVC&quot;&gt;&lt;a href=&quot;#MVC&quot; class=&quot;headerlink&quot; title=&quot;MVC&quot;&gt;&lt;/a&gt;MVC&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;MVC(模型Model-视图View-控制器Controller)的缩写，是一种软件的设计典范。主要是用来
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>混乱的MVC架构模式相关</title>
    <link href="http://yoursite.com/2018/03/07//%E6%B7%B7%E4%B9%B1%E7%9A%84MVC%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F//"/>
    <id>http://yoursite.com/2018/03/07//混乱的MVC架构模式//</id>
    <published>2018-03-07T12:50:02.587Z</published>
    <updated>2018-03-07T12:50:02.587Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MVC(模型Model-视图View-控制器Controller，1982年)是一种软件设计的典范，它采用将业务逻辑、数据、界面进行分离的方式组织代码。但是它作为最基本的架构模式，至今已经发展了几十年，却没有一个明确的标准，每个人都有着自己的看法，对于它的实现方式也有着许多的不同。今天我们就来谈谈MVC是怎么混乱的。</p></blockquote><p><img src alt="MVC图片"></p><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><ul><li>Model：模型，对应的在我们的项目中就是数据类(数据的存储、操作等)</li><li>View：视图，可以理解为用来显示数据的界面，对于用户来说是最直观能看到的东西(一般对应项目中的布局xml)</li><li>Controller：控制器，用来处理用户交互的部分，通常是从视图读取数据，控制用户的输入，想Model发送数据等等(具体可以去看我们的Activity，一般来说我们在项目中把Controoler对应我们Activity，它的作用我想大家都能够说出个一二三四来,我在这里就不多加内容)</li></ul><h5 id="关于混乱"><a href="#关于混乱" class="headerlink" title="关于混乱"></a>关于混乱</h5><p><strong>一千个读者就有一千个哈利波特，一千个乘客就有一千个老司机</strong></p><p>ASP.NET MVC</p><p>这是<a href="https://msdn.microsoft.com/en-us/library/dd381412(v=vs.108" target="_blank" rel="noopener">ASP.NET MVC</a>.aspx)中对于MVC的描述定义。</p><p><img src="https://i-msdn.sec.s-msft.com/dynimg/IC263184.png" alt="MVC示意图"></p><p>原谅我直接盗图…</p><p><em>ASP.NET</em> 对于这个示意图仅仅是通过几个箭头来表示之间的关系，但是我们可以从图片从得到我们所能看到的关系：</p><ul><li>1.Controller即控制器它负责对View和Model进行管理，它能直接操作到View和Model</li><li>2.View来显示Model的数据</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;MVC(模型Model-视图View-控制器Controller，1982年)是一种软件设计的典范，它采用将业务逻辑、数据、界面进行分离的方式组织代码。但是它作为最基本的架构模式，至今已经发展了几十年，却没有一个明确的标准，每个人都有着自己的看法，
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AttachInfo的初步了解和解析</title>
    <link href="http://yoursite.com/2018/03/07//AttachInfo%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3%E5%92%8C%E8%A7%A3%E6%9E%90//"/>
    <id>http://yoursite.com/2018/03/07//AttachInfo的初步了解和解析//</id>
    <published>2018-03-07T12:50:02.586Z</published>
    <updated>2018-03-07T12:50:02.586Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">View&#123;</span><br><span class="line"> ...</span><br><span class="line">  /**</span><br><span class="line">   * A set of information given to a view when it is attached to its parent window.</span><br><span class="line">   */</span><br><span class="line">     final static class AttachInfo &#123;</span><br><span class="line">    interface Callbacks &#123;</span><br><span class="line">            void playSoundEffect(int effectId);</span><br><span class="line">            boolean performHapticFeedback(int effectId, boolean always);</span><br><span class="line">        &#125;</span><br><span class="line">         static class InvalidateInfo &#123;</span><br><span class="line">         ...</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        final IWindowSession mSession;</span><br><span class="line"></span><br><span class="line">        final IWindow mWindow;</span><br><span class="line"></span><br><span class="line">        final IBinder mWindowToken;</span><br><span class="line"></span><br><span class="line">        final Display mDisplay;</span><br><span class="line"></span><br><span class="line">        final Callbacks mRootCallbacks;</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>View</strong>的显示过程是需要依附在<strong>Window</strong>窗口上的，而<strong>View</strong>和<strong>Window</strong>的关系是通过<strong>AttachInfo</strong>来管理的，但是实际上这个类我们使用的很少，它是View的内部类而且不是公开的，我们一般只有在ViewRootImpl等类中使用到</p><blockquote><p>我们可以通过AttachInfo来获取当前View依附的是哪个Window窗口</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://yoursite.com/2018/03/07//%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F//"/>
    <id>http://yoursite.com/2018/03/07//设计模式//</id>
    <published>2018-03-07T12:50:02.585Z</published>
    <updated>2018-03-08T03:32:18.479Z</updated>
    
    <content type="html"><![CDATA[<h4 id="设计模式的分类："><a href="#设计模式的分类：" class="headerlink" title="设计模式的分类："></a>设计模式的分类：</h4><ul><li>创建型模式：</li></ul><blockquote><p>工厂模式、抽象工厂模式、单例模式、建造者模式、原型模式</p></blockquote><ul><li>结构型模式：</li></ul><blockquote><p>适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式</p></blockquote><ul><li>行为型模式：</li></ul><blockquote><p>策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</p></blockquote><h4 id="设计模式的六大原则："><a href="#设计模式的六大原则：" class="headerlink" title="设计模式的六大原则："></a>设计模式的六大原则：</h4><blockquote><p>核心思想还是<strong>高内聚低耦合</strong></p></blockquote><ul><li><p>开闭原则</p><blockquote><p>对扩展开放，对修改关闭</p></blockquote></li><li><p>里氏代换原则</p></li></ul><blockquote></blockquote><ul><li>依赖倒转原则</li><li><p>接口隔离原则</p><blockquote><p>使用多个隔离的接口，比使用单个接口要好，其实还是要降低耦合性</p></blockquote></li><li><p>迪米特原则(最少知道原则)</p><blockquote><p>一个类或者接口应该尽量少的和其他类或接口相互知道，使得系统功能模块相对独立</p></blockquote></li><li><p>合成复用原则</p><blockquote><p>尽量使用合成/聚合的方式，而不是使用继承</p></blockquote></li></ul><h5 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a><strong>工厂模式</strong></h5><p>工厂模式：把对象的创建放到一个工厂类中，通过参数或者是不同的方法来创建不同的对象，缺点在于每添加一个对象，都要去修改原来的工厂。</p><ul><li>普通工厂模式</li></ul><blockquote><p>建立一个工厂类，对实现了同一接口的一些类进行实例的创建</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class RunFactory &#123;</span><br><span class="line">    </span><br><span class="line">    public RunInterface runType(String type) &#123;</span><br><span class="line">        if (&quot;A&quot;.endsWith(type)) &#123;</span><br><span class="line">            return new ARuning();</span><br><span class="line">        &#125; else if (&quot;B&quot;.endsWith(type)) &#123;</span><br><span class="line">            return new BRuning();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>多个工厂模式</li></ul><blockquote><p>对普通工厂模式的改进，在普通工厂模式中如果传递的参数出错，则不能正确创建对象，而多个工厂模式是提供了多个工厂方法，分别创建对象</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class RunMoreFactory &#123;</span><br><span class="line">    public RunInterface runA() &#123;</span><br><span class="line">        return new ARuning();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public RunInterface runB() &#123;</span><br><span class="line">        return new BRuning();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>静态工厂模式</li></ul><blockquote><p>对普通工厂模式和多个工厂模式的扩展，在静态工厂中提供静态的工厂方法，不需要创建实例，直接调用就可以</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class RunStaticFactory &#123;</span><br><span class="line"></span><br><span class="line">    public static RunInterface runA() &#123;</span><br><span class="line">        return new ARuning();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static RunInterface runB() &#123;</span><br><span class="line">        return new BRuning();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>好处</li></ul><blockquote><p>工厂模式看上去就是把new封装出来，虽然看上去很简单，但是实际上这恰恰就是通往架构师路上必须要学会的！因为我们要new一个实体对象实际上是一件需要非常谨慎的事情，不要随便的new，最好不要自己去new，让别人去new，传给你去调用。让谁去new，让专门的一个工厂去new。这就是工厂模式！<strong>new 其实是一种硬编码</strong></p></blockquote><h5 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a><strong>抽象工厂</strong></h5><p>抽象工厂：创建多个工厂类，每个对象的创建都由专门的一个工厂去创建，一个工厂保存一个new，符合<strong>不改代码</strong>原则</p><ul><li>需要实现的接口：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface FlyInterface &#123;</span><br><span class="line">    void fly();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>专门生产工厂的类：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface FlyFactoryProduce &#123;</span><br><span class="line">    FlyInterface produce();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>工厂A：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class AFlyFactory implements FlyFactoryProduce &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public FlyInterface produce() &#123;</span><br><span class="line">        return new AFly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>工厂B：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class BFlyFactory implements FlyFactoryProduce &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public FlyInterface produce() &#123;</span><br><span class="line">        return new BFly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>A实现：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class AFly implements FlyInterface &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void fly() &#123;</span><br><span class="line">        Log.d(&quot;AFly&quot;, &quot;AFly&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>B实现：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class BFly implements FlyInterface &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void fly() &#123;</span><br><span class="line">        Log.d(&quot;BFly&quot;, &quot;BFly&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FlyInterface AflyInterface = new AFlyFactory().produce();</span><br><span class="line">AflyInterface.fly();</span><br><span class="line"></span><br><span class="line">FlyInterface BflyInterface = new BFlyFactory().produce();</span><br><span class="line">BflyInterface.fly();</span><br></pre></td></tr></table></figure><h5 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a><strong>单例模式</strong></h5><p>单例模式：有时候，我们在程序中只需要某个类同时保留一个对象，不希望有更多的对象</p><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><ul><li><p>单例模式只能有一个实例</p></li><li><p>单例类必须创建自己的唯一实例</p></li><li><p>单例类必须向其他对象提供这一实例</p></li></ul><p>常见的单例模式实现方式：</p><ul><li>懒汉，线程不安全</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class SingletonHelper &#123;</span><br><span class="line"></span><br><span class="line">    private static SingletonHelper ourInstance = null;</span><br><span class="line"></span><br><span class="line">    private SingletonHelper() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 懒汉，线程不安全</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static SingletonHelper getInstance() &#123;</span><br><span class="line">        if (ourInstance == null) &#123;</span><br><span class="line">            ourInstance = new SingletonHelper();</span><br><span class="line">        &#125;</span><br><span class="line">        return ourInstance;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>缺点在于多线程不能正常工作</p><ul><li>懒汉，线程安全</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class SingletonHelper &#123;</span><br><span class="line"></span><br><span class="line">    private static SingletonHelper ourInstance = null;</span><br><span class="line"></span><br><span class="line">    private SingletonHelper() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 懒汉，线程安全</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static SingletonHelper getInstance() &#123;</span><br><span class="line">        if (ourInstance == null) &#123;</span><br><span class="line">            synchronized (ourInstance) &#123;</span><br><span class="line">                if (ourInstance == null) &#123;</span><br><span class="line">                    ourInstance = new SingletonHelper();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ourInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法能在多线程中很好的工作，但是实际情况下，需要同步的时候非常少，因此会耗费一定资源</p><ul><li>饿汉</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class SingletonHelper &#123;</span><br><span class="line"></span><br><span class="line">    private static SingletonHelper inInstance = new SingletonHelper();</span><br><span class="line"></span><br><span class="line">    private SingletonHelper() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static SingletonHelper getInInstance()&#123;</span><br><span class="line">        return inInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点一开始就进行实例化，没有能做到lazy-loading</p><ul><li>饿汉，变种</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class SingletonHelper &#123;</span><br><span class="line"></span><br><span class="line">    private static SingletonHelper ourInstance = null;</span><br><span class="line">    </span><br><span class="line">    static &#123;</span><br><span class="line">        inInstance = new SingletonHelper();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private SingletonHelper() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static SingletonHelper getInInstance()&#123;</span><br><span class="line">        return inInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上跟饿汉没有什么很大区别，都是在类初始化的时候就进行实例化对象</p><ul><li>静态内部类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class SingletonHelper &#123;</span><br><span class="line"></span><br><span class="line">    private static SingletonHelper ourInstance = null;</span><br><span class="line"></span><br><span class="line">    private SingletonHelper() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 静态内部类</span><br><span class="line">     */</span><br><span class="line">    private static class SingletonHolder &#123;</span><br><span class="line">        private static final SingletonHelper SINGLETON_HELPER = new SingletonHelper();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static final SingletonHelper getOurInstance() &#123;</span><br><span class="line">        return SingletonHolder.SINGLETON_HELPER;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>枚举</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public enum SingleEnumHelper &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    public void otherMethod() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式是Effective Java作者Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象，但是有个缺点在于枚举的使用</p><ul><li>双重校验锁</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class SingletonHelper &#123;</span><br><span class="line"></span><br><span class="line">    private volatile static SingletonHelper singletonHelper;</span><br><span class="line"></span><br><span class="line">    private SingletonHelper() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 双重加锁</span><br><span class="line">     *</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static SingletonHelper getSingletonHelper() &#123;</span><br><span class="line">        if (null == singletonHelper) &#123;</span><br><span class="line">            synchronized (SingletonHelper.class) &#123;</span><br><span class="line">                if (null == singletonHelper) &#123;</span><br><span class="line">                    singletonHelper = new SingletonHelper();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return singletonHelper;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>关于单例参考：</p><p><a href="http://www.blogjava.net/kenzhh/archive/2016/03/28/357824.html" target="_blank" rel="noopener">Java：单例模式的七种写法</a></p><p><a href="https://www.cnblogs.com/cielosun/p/6582333.html" target="_blank" rel="noopener">Java单例模式(Singleton)以及实现</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;设计模式的分类：&quot;&gt;&lt;a href=&quot;#设计模式的分类：&quot; class=&quot;headerlink&quot; title=&quot;设计模式的分类：&quot;&gt;&lt;/a&gt;设计模式的分类：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;创建型模式：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;工厂模式、抽
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从项目需求到PopupWindow在到Window的过程浅析</title>
    <link href="http://yoursite.com/2018/03/07//%E4%BB%8E%E9%A1%B9%E7%9B%AE%E9%9C%80%E6%B1%82%E5%88%B0PopupWindow%E5%9C%A8%E5%88%B0Window%E7%9A%84%E8%BF%87%E7%A8%8B%E6%B5%85%E6%9E%90//"/>
    <id>http://yoursite.com/2018/03/07//从项目需求到PopupWindow在到Window的过程浅析//</id>
    <published>2018-03-07T12:50:02.585Z</published>
    <updated>2018-03-07T12:50:02.585Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><blockquote><p>项目中有这么个需求，底部是5个Tab选项，中间那个是一个圆形的高位按钮选项，点击中间选项会从底部弹出个布局，并且这个布局的视觉效果是要在这个圆形选项的底部…这么说有点混乱，来张效果图看看</p></blockquote><p><img src="http://p0sgkjh7x.bkt.clouddn.com/3BD32333-AE0F-4F31-8D8A-596D12178F9B.png" height="220" width="150"><strong>点击场景后</strong><br><img src="http://p0sgkjh7x.bkt.clouddn.com/388EEDFA-1AFB-4DA1-9DDD-D605717110B0.png" height="220" width="150"></p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><blockquote><p>看到这2个设计图的时候第一想法是底部3个<strong>tab</strong>选项然后点击场景后弹出个<strong>PopupWindow</strong>，因为用过而且用的场景还挺多的。</p></blockquote><p>然后啪啦啪啦的一堆代码出现了，下面的3个<strong>tab</strong>选项用简单的实现了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    android:background=&quot;#4FC3F3&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;RelativeLayout</span><br><span class="line">        android:id=&quot;@+id/layout&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;50dp&quot;</span><br><span class="line">        android:layout_alignParentBottom=&quot;true&quot;</span><br><span class="line">        android:background=&quot;#D8D8D8&quot;</span><br><span class="line">        android:orientation=&quot;horizontal&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;50dp&quot;</span><br><span class="line">            android:layout_height=&quot;40dp&quot;</span><br><span class="line">            android:layout_centerVertical=&quot;true&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;15dp&quot;</span><br><span class="line">            android:background=&quot;#9F79EE&quot;</span><br><span class="line">            android:gravity=&quot;center&quot;</span><br><span class="line">            android:text=&quot;智控&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;50dp&quot;</span><br><span class="line">            android:layout_height=&quot;40dp&quot;</span><br><span class="line">            android:layout_alignParentRight=&quot;true&quot;</span><br><span class="line">            android:layout_centerVertical=&quot;true&quot;</span><br><span class="line">            android:layout_marginRight=&quot;15dp&quot;</span><br><span class="line">            android:background=&quot;#9F79EE&quot;</span><br><span class="line">            android:gravity=&quot;center&quot;</span><br><span class="line">            android:text=&quot;个人&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/RelativeLayout&gt;</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">    android:id=&quot;@+id/noun_text&quot;</span><br><span class="line">        android:layout_width=&quot;60dp&quot;</span><br><span class="line">        android:layout_height=&quot;60dp&quot;</span><br><span class="line">        android:layout_alignParentBottom=&quot;true&quot;</span><br><span class="line">        android:layout_centerHorizontal=&quot;true&quot;</span><br><span class="line">        android:background=&quot;#FFFFFF&quot;</span><br><span class="line">        android:gravity=&quot;center&quot;</span><br><span class="line">        android:text=&quot;场景&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure><p>大概的效果就是这样的，只是个初步的布局，毕竟这边是为了演示效果</p><p><img src="http://p0sgkjh7x.bkt.clouddn.com/B8E680CD-11EC-4870-9D2B-C5B1F2EDDB7E.png" height="250" width="150"></p><p>然后添加中间场景的点击事件，刚也说了想用到<strong>PopupWindow</strong>从底部弹出，然后就开始去实现设计图的效果</p><p>下面就是PopupWindow的实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">private PopupWindow mPopupWindow;</span><br><span class="line">/**</span><br><span class="line"> * PopupWindow的View</span><br><span class="line"> */</span><br><span class="line">private View popView;</span><br><span class="line">/**</span><br><span class="line"> *场景TextView</span><br><span class="line"> */</span><br><span class="line">private TextView nounText;</span><br><span class="line">/**</span><br><span class="line"> *底部Layout</span><br><span class="line"> */</span><br><span class="line">private LinearLayout layout;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">super.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_popup);</span><br><span class="line">nounText = (TextView) findViewById(R.id.noun_text);</span><br><span class="line">layout = (LinearLayout) findViewById(R.id.layout);</span><br><span class="line">popView = LayoutInflater.from(this).inflate(R.layout.popup_layout, null);</span><br><span class="line">mPopupWindow = new PopupWindow(popView, WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.WRAP_CONTENT);</span><br><span class="line">mPopupWindow.setOutsideTouchable(true);</span><br><span class="line"></span><br><span class="line">nounText.setOnClickListener(v -&gt; &#123;</span><br><span class="line">    mPopupWindow.showAtLocation(nounText, Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM, 0, layout.getHeight());</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而想法是美好的，但是现实往往是残酷的…</p><p>最后的实现效果却是这样的</p><p><img src="http://p0sgkjh7x.bkt.clouddn.com/912830D1-3B7D-4391-BB8C-6829D68213D1.png" height="250" width="150"><strong>对比下这2个图</strong><img src="http://p0sgkjh7x.bkt.clouddn.com/B8E680CD-11EC-4870-9D2B-C5B1F2EDDB7E.png" height="250" width="150"></p><p>咋一看是没有问题，但是实际上中间的那个场景选项并没有盖在底部的那个popView上面，当时的想法就是让设计改下(😶，然而就是想想而已)</p><p>后来开始思考如果让这个<strong>PopView</strong>在场景的下面，当时有2个思路：</p><ul><li>1.通过在<strong>PopView</strong>的底部中间加个半圆形衔接下面的场景选项，营造出遮盖的视觉效果</li><li>2.因为<strong>PopupWindow</strong>是需要依附在某个组件上的，想能不能再场景的底层在添加个组件(被场景选项遮盖着)，然后让<strong>PopupWindow</strong>去依附这个看不见的组件</li></ul><p>有了思路就开始动手试试看，然而现实是这2个都不能很好实现要的效果，第一个是因为添加半圆形的时候位置很容易出错，特别是适配的时候，第二个思路的结果发现结果还是跟原来的一样，尽管<strong>PopupWindow</strong>依附的是在场景下的组件，但是效果还是跟依附场景的时候一样😓…</p><blockquote><p><strong>Why(当时想法只剩下这个了…)</strong></p></blockquote><p>要想知道原因，我们就要从<strong>PopupWindow</strong>的内部实现方法来分析</p><h4 id="PopupWindow内部方法的初步分析"><a href="#PopupWindow内部方法的初步分析" class="headerlink" title="PopupWindow内部方法的初步分析"></a>PopupWindow内部方法的初步分析</h4><blockquote><p><strong>PopupWindow</strong>它不是一个<strong>View</strong>或者是<strong>ViewGroup</strong>，所以在使用的时候需要的传入我们的布局View,这边需要注意的是它既不是<strong>View</strong>也不是<strong>ViewGroup</strong>，那么它是什么呢？</p></blockquote><ul><li><strong>PopupWindow</strong>的创建</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private PopupWindow mPopupWindow;</span><br><span class="line">/**</span><br><span class="line"> * PopupWindow的View</span><br><span class="line"> */</span><br><span class="line">private View popView;</span><br><span class="line">popView = LayoutInflater.from(this).inflate(R.layout.popup_layout, null);</span><br><span class="line">mPopupWindow = new PopupWindow(popView, WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.WRAP_CONTENT);</span><br></pre></td></tr></table></figure><p>代码中创建<strong>PopupWindow</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public PopupWindow(View contentView, int width, int height, boolean focusable) &#123;</span><br><span class="line">/**</span><br><span class="line"> * 如果contentView不为空，通过contentView获取WindowManager对象</span><br><span class="line"> * 所以这边我们可以想到了window窗口这个对象，进而popupWindow可能跟window有关，实际上从它的命名也能猜到了</span><br><span class="line"> */</span><br><span class="line">    if (contentView != null) &#123;</span><br><span class="line">        mContext = contentView.getContext();</span><br><span class="line">        mWindowManager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">    &#125;</span><br><span class="line">//设置contentView</span><br><span class="line">    setContentView(contentView);</span><br><span class="line">    //设置宽度</span><br><span class="line">    setWidth(width);</span><br><span class="line">    //设置高度</span><br><span class="line">    setHeight(height);</span><br><span class="line">    //默认focusable为false</span><br><span class="line">    setFocusable(focusable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建的过程实际上很简单,通过<strong>PopupWindow</strong>的构造方法传入需要的contentView、宽、高就能够得到一个<strong>PopupWindow</strong>对象，但是我们刚也说了它不是<strong>View</strong>也不是<strong>ViewGroup</strong>那它是如何能够显示的呢</p><p>在项目使用<strong>PopupWindow</strong>的时候是通过<strong>showAtLocation</strong>方法来设置具体的显示位置的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mPopupWindow.showAtLocation(nounText, Gravity.CENTER_HORIZONTAL | Gravity.BOTTOM, 0, layout.getHeight());</span><br></pre></td></tr></table></figure><p><strong>PopupWindow</strong>还有其他的设置显示的方法，这里我们就不具体的说明，但是实际上最后都是需要用到下面这几个方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//获取WindowManager的布局参数</span><br><span class="line">final WindowManager.LayoutParams p = createPopupLayoutParams(anchor.getWindowToken());</span><br><span class="line"></span><br><span class="line">//准备Pop</span><br><span class="line">preparePopup(p);</span><br><span class="line"></span><br><span class="line">//引用Pop</span><br><span class="line">invokePopup(p);</span><br></pre></td></tr></table></figure><p>所以我们最需要关注的还是这几个方法的实现过程</p><p>返回<strong>Window</strong>的布局参数<strong>WindowManager.LayoutParams</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private WindowManager.LayoutParams createPopupLayoutParams(IBinder token) &#123;</span><br><span class="line">    final WindowManager.LayoutParams p = new WindowManager.LayoutParams();</span><br><span class="line">...//这边省略了一些关于设置布局参数p的方法</span><br><span class="line">    return p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>准备<strong>PopupWindow</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private void preparePopup(WindowManager.LayoutParams p) &#123;</span><br><span class="line"> ...</span><br><span class="line">    if (mDecorView != null) &#123;</span><br><span class="line">        mDecorView.cancelTransitions();</span><br><span class="line">    &#125;</span><br><span class="line">    if (mBackground != null) &#123;//如果mBackground不为空即设置了popupWindow的背景图片</span><br><span class="line">        mBackgroundView = createBackgroundView(mContentView);</span><br><span class="line">        mBackgroundView.setBackground(mBackground);</span><br><span class="line">    &#125; else &#123;//如果没有设置背景图片的话，让contentView==背景View</span><br><span class="line">        mBackgroundView = mContentView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mDecorView = createDecorView(mBackgroundView);</span><br><span class="line">    mBackgroundView.setElevation(mElevation);</span><br><span class="line">    p.setSurfaceInsets(mBackgroundView, true /*manual*/, true /*preservePrevious*/);</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引用<strong>PopupWindow</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private void invokePopup(WindowManager.LayoutParams p) &#123;</span><br><span class="line">    if (mContext != null) &#123;</span><br><span class="line">        p.packageName = mContext.getPackageName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    final PopupDecorView decorView = mDecorView;</span><br><span class="line">    decorView.setFitsSystemWindows(mLayoutInsetDecor);</span><br><span class="line">    </span><br><span class="line">    setLayoutDirectionFromAnchor();</span><br><span class="line">//这边通过addView方法添加我们的PopupView</span><br><span class="line">    mWindowManager.addView(decorView, p);</span><br><span class="line"></span><br><span class="line">    if (mEnterTransition != null) &#123;</span><br><span class="line">        decorView.requestEnterTransition(mEnterTransition);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<strong>WindowManager</strong>的<strong>addView()</strong>把我们的<strong>PopupDecorView</strong>以及布局的参数P添加到<strong>Window</strong>上</p><hr><p>未完待续…</p><h4 id="PopupWindow延伸问题"><a href="#PopupWindow延伸问题" class="headerlink" title="PopupWindow延伸问题:"></a>PopupWindow延伸问题:</h4><blockquote><p>这里会添加一些popupWindow常见的问题，陆续更新中…</p></blockquote><ul><li><p><strong>isShowing失效问题</strong></p><p>  在实现popupWindow的过程中，点击按错出现popupWindow，然后再次点击按钮的时候，需要把popupWindow dismiss掉，实现的方法为判断是否显示isShowing，为false才让popupWindow显示</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!popupWindow.isShowing()) &#123;</span><br><span class="line">    popupWindow.showAsDropDown(view);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><pre><code>但是发现不管怎么样，**isShowing**一直返回为**false**，所以每次点击按钮popupWindow都会重新显示，断点查看后，发现每次点击出现popupWindow的按钮的时候都会去执行dismiss方法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 这里一直返回为false</span><br><span class="line"> */</span><br><span class="line">public boolean isShowing() &#123;</span><br><span class="line">       return mIsShowing;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">public void dismiss() &#123;</span><br><span class="line">       if (!isShowing() || isTransitioningToDismiss()) &#123;</span><br><span class="line">           return;</span><br><span class="line">       &#125;</span><br><span class="line">       ...省略</span><br><span class="line">       </span><br><span class="line">       mIsShowing = false;//每次点击都会改变mIsShowing为false</span><br><span class="line">       </span><br><span class="line">       ...省略</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>然后又发现代码中有这么一句话<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">popupWindowLogin.setOutsideTouchable(true);</span><br></pre></td></tr></table></figure>这是为了能实现点击popupWindow外部能消失的效果，然后这里突然想到我们点击按钮的时候也属于点击popupWindow外部，所以这里先调用了**dismiss**方法改变了我们的**mIsShowing**的值知道了具体的原因后，我们发现这里主要是要让按钮的点击变成popupWindow的点击效果，所以我们只要让popupWindow在显示的时候把焦点先抢过来，然后我们点击按钮的时候，实际上就是点击popupWindow，想起来以前焦点问题的时候有这么一句话：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">popupWindowLogin.setFocusable(true);</span><br></pre></td></tr></table></figure>将焦点设置给popupWindow，然后我们再次点击按钮的时候由于焦点在popupWindow上，所以我们就可以正常的获取**mIsShowing**的值，在来执行我们的判断了。&gt; 加上代码了试了下效果，果然可行，Nice！</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;项目中有这么个需求，底部是5个Tab选项，中间那个是一个圆形的高位按钮选项，点击中间选项会从底部弹出个布局，并且这
      
    
    </summary>
    
    
  </entry>
  
</feed>
